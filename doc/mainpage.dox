/*
 * Copyright (C) 2017 Southern Storm Software, Pty Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
\file mainpage.dox
\mainpage

The SKINNY family of tweakable block ciphers is intended for lightweight
implementation in hardware and software, <a href="https://eprint.iacr.org/2016/660.pdf">paper</a>.

The algorithm authors' <a href="https://sites.google.com/site/skinnycipher">web site</a>
provides a <a href="https://sites.google.com/site/skinnycipher/downloads/skinny_reference.c">refererence implementation</a> in C, but it isn't terribly
efficient - it is intended to be <i>correct</i> to make the algorithm
easier to analyse.  And that's OK.

The Skinny-C <a href="https://github.com/rweather/skinny-c">repository</a>
provides an alternative implementation in ISO C99 that is designed for
efficient operation on 32-bit and 64-bit platforms.  Alternative backends
for CTR mode are also provided that can make use of <a href="https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html">GCC Vector Extensions</a>
or equivalent on systems that support 128-bit SIMD and 256-bit SIMD operations.

Other assembly language and SIMD speed-ups are definitely possible, such as
<a href="https://github.com/kste/skinny_avx">this</a> blindingly fast AVX2
implementation, and may be added later.

This implementation is designed to have constant-time and constant-cache
behaviour.  In particular, there are no lookup tables for the S-boxes.

Skinny-C is distributed under the terms of the MIT license.

\section main_build Building Skinny-C

To build the code with gcc and gmake, simply type "make".  Then type
"make check" to run the test cases and "make perf" to run the performance
tests.  Some modifications may be needed to the Makefile's and the
"options.mak" file to build on non-GNU platforms or with other compilers.

The definitions in the "options.mak" file can be used to tune the compiler
options for enabling various features like SSE2, NEON, or AVX2 instructions.
The files "src/skinny-internal.h" and "src/skinny-internal.c" also contain
definitions that can be tuned to get better performance on your platform.

I mainly use gcc on a Linux x86-64 platform.  There is some support in
the code for compiling with clang.  Patches are welcome to tune the
library for other platforms and compilers.

\section main_using Using Skinny-C

The API for Skinny-C is described on \ref using_skinny "this page".

\section main_examples Examples

There are three example programs, "skinny-ctr", "skinny-tweak", and
"skinny-ecb" in the "examples" directory of the repository.  See the
README.md file in that directory for information on using the examples.

The "skinny-ctr" program is a simple example of encrypting and decrypting
files using SKINNY in CTR mode.  Incrementing counter values are encrypted
for each block and XOR'ed with the plaintext to create the ciphertext.

The "skinny-tweak" program is similar to "skinny-ctr" except that it
increments the tweak each block and encrypts the plaintext directly
using the key and tweak.  This is intended as an example of using
SKINNY as a true tweakable block cipher, rather than a recommended
method to use SKINNY in a realistic application.

The "skinny-ecb" program is similar to "skinny-ctr" except that it
encrypts the data in ECB mode.

\section main_apiref API Reference

\li \ref skinny128 "Skinny-128 API"
\li \ref skinny64 "Skinny-64 API"
\li \ref mantis "Mantis API"

\section main_arduino Arduino Version

The Skinny-C repository contains a cut-down implementation of Skinny-64,
Skinny-128, and Mantis-8 for Arduino devices.  More information is on
\ref skinny_arduino "this page".

\section main_contact Contact

For more information on this code, to report bugs, or to suggest
improvements, please contact the author Rhys Weatherley via
<a href="mailto:rhys.weatherley@gmail.com">email</a>.

*/
